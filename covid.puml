@startuml



class MainActivity extends Activity{
    void onCreate(Bundle savedInstanceState)
    -saveGameModel(String file)
    -loadGameLevel(String file)
    +onSaveInstanceState(Bundle savedInstanceState)
}

package View {
    MainActivity o-- GameView
    GameView o-- Tile
    interface Tile {
        void draw(Canvas canvas, int side);
        boolean setSelect(boolean selected);
    }
    abstract class FigureTile implements Tile {
        Paint paint
        Img FigureImg
        void draw(Canvas canvas, int side);
        boolean setSelect(boolean selected);
    }
    class GameView implements ModelListener {
        TilePanel tilePanel
        HashMap<Class, Tile> modelToView
        +GameView(Context ctx, TilePanel tilePanel)
        +setPlayerDead(boolean playerDead)
        +update(Level level)
    }
    class PlayerView extends FigureTile{
    FloorView(Context ctx)
    }
    class TrashView extends FigureTile{
     FloorView(Context ctx)
    }
    class VirusView extends FigureTile{
    FloorView(Context ctx)
    }
    class WallView extends FigureTile{
    FloorView(Context ctx)
    }
}

package model {

    MainActivity o-- GameModel
    GameModel o-- Level
    GameModel o-- ModelListener
    Level o-- Position
    Level *-- Element

    interface ModelListener {
        void update(Level level);
    }

    class Position {
        int line
        int column
        +Position(int line, int column)
    }

    class GameModel {
        -ModelListener modelListener
        +boolean isGameOver
        +enum Direction = LEFT, RIGHT
        -int TOTAL_LEVELS «final»
        -Level levelNumber
        -Loader loader
        +GameModel(ModelListener modelListener, AssetManager assets)
        +loadLevelFromAssets(int levelNumber)
        +save(PrintWriter to)
        +loadLevel(Scanner from)
        +loadLevel(Scanner from, int number)
        +movePlayer(Direction direction)
        +getNumberLevel(): int
        +getVirusCounter(): int
        +isPlayerAlive(): boolean
        -checkForTrash(Position position)
        +updateIfLevelIsFinished()
        +checkGravity()
        +update()
    }

    class Level {
        int levelNumber
        boolean playerAlive
        int virusCounter
        Position playerPosition
        ArrayList<Position> gravityElements
        HashMap availableElements
        Element[][] board
        +getColumn(): int
        +int getLine(): int
        +int getNumber(): int
        +reset()
        +get(int line, int column): Element
        +get(Position position): Element
        +isPositionInbounds(int line, int column): boolean
        +isPositionInbounds(Position position): boolean
        +put(int line, int column, char type)
        +decreaseVirus()
        +removeElement(Position position)
        -updatePositionInGravityElements(Position oldPosition, Position newPosition)
        +moveElement(Position oldPosition, Position newPosition)
    }

    abstract class Element {
        +hasGravity():boolean
        +elementCollision(Element element):boolean
        +abstract save(PrintWriter to)
    }

    class Player extends Element{
        String character = "@" «final»
        +hasGravity():boolean
        +save(PrintWriter to)
        +boolean elementColision():boolean
    }

    class Virus extends Element {
        String character = "*" «final»
        +hasGravity():boolean
        +save(PrintWriter to)
        +boolean elementColision():boolean
    }

    class TrashCan extends Element {
        String character = "V" «final»
        +hasGravity():boolean
        +save(PrintWriter to)
        +boolean elementColision():boolean
    }

    class Floor extends Element {
        String character = "X" «final»
        +hasGravity():boolean
        +save(PrintWriter to)
        +elementColision():boolean
    }
}
@enduml